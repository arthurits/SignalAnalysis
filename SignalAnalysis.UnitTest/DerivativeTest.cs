namespace SignalAnalysis.UnitTest;

[TestClass]
public class DerivativeTest
{
    private readonly double[] sin1Hz = [0, 0.0627905195293134, 0.1253332335643040, 0.1873813145857250, 0.2486898871648550, 0.3090169943749470, 0.3681245526846780,
        0.4257792915650730, 0.4817536741017150, 0.5358267949789970, 0.5877852522924730, 0.6374239897486900, 0.6845471059286890, 0.7289686274214110, 0.7705132427757890,
        0.8090169943749470, 0.8443279255020150, 0.8763066800438640, 0.9048270524660200, 0.9297764858882510, 0.9510565162951540, 0.9685831611286310, 0.9822872507286890,
        0.9921147013144780, 0.9980267284282720, 1, 0.9980267284282720, 0.9921147013144780, 0.9822872507286890, 0.9685831611286310, 0.9510565162951530, 0.9297764858882510,
        0.9048270524660190, 0.8763066800438630, 0.8443279255020150, 0.8090169943749470, 0.7705132427757890, 0.7289686274214110, 0.6845471059286880, 0.6374239897486890,
        0.5877852522924720, 0.5358267949789960, 0.4817536741017140, 0.4257792915650720, 0.3681245526846770, 0.3090169943749460, 0.2486898871648540, 0.1873813145857230,
        0.1253332335643030, 0.0627905195293118, 0, -0.0627905195293147, -0.1253332335643060, -0.1873813145857260, -0.2486898871648560, -0.3090169943749490, -0.3681245526846800,
        -0.4257792915650740, -0.4817536741017170, -0.5358267949789980, -0.5877852522924740, -0.6374239897486910, -0.6845471059286900, -0.7289686274214130, -0.7705132427757900,
        -0.8090169943749490, -0.8443279255020160, -0.8763066800438640, -0.9048270524660200, -0.9297764858882520, -0.9510565162951540, -0.9685831611286320, -0.9822872507286890,
        -0.9921147013144780, -0.9980267284282720, -1, -0.9980267284282710, -0.9921147013144780, -0.9822872507286880, -0.9685831611286300, -0.9510565162951530,
        -0.9297764858882500, -0.9048270524660180, -0.8763066800438620, -0.8443279255020140, -0.8090169943749450, -0.7705132427757870, -0.7289686274214090, -0.6845471059286860,
        -0.6374239897486870, -0.5877852522924700, -0.5358267949789930, -0.4817536741017120, -0.4257792915650700, -0.3681245526846750, -0.3090169943749440, -0.2486898871648510,
        -0.1873813145857210, -0.1253332335643000, -0.0627905195293097, 0];

    private double[] Dsin1Hz = [6.283185307, 6.270786876, 6.233640514, 6.171892821, 6.085787487, 5.975664329, 5.841957955, 5.685196042, 5.505997257, 5.305068816,
        5.083203692, 4.841277486, 4.580244969, 4.301136318, 4.005053047, 3.693163661, 3.366699045, 3.026947607, 2.675250189, 2.312994781, 1.941611039, 1.562564645, 1.177351523,
        0.787491932, 0.39452447, 0, -0.39452447, -0.787491932, -1.177351523, -1.562564645, -1.941611039, -2.312994781, -2.675250189, -3.026947607, -3.366699045, -3.693163661,
        -4.005053047, -4.301136318, -4.580244969, -4.841277486, -5.083203692, -5.305068816, -5.505997257, -5.685196042, -5.841957955, -5.975664329, -6.085787487, -6.171892821,
        -6.233640514, -6.270786876, -6.283185307, -6.270786876, -6.233640514, -6.171892821, -6.085787487, -5.975664329, -5.841957955, -5.685196042, -5.505997257, -5.305068816,
        -5.083203692, -4.841277486, -4.580244969, -4.301136318, -4.005053047, -3.693163661, -3.366699045, -3.026947607, -2.675250189, -2.312994781, -1.941611039, -1.562564645,
        -1.177351523, -0.787491932, -0.39452447, 0, 0.39452447, 0.787491932, 1.177351523, 1.562564645, 1.941611039, 2.312994781, 2.675250189, 3.026947607, 3.366699045,
        3.693163661, 4.005053047, 4.301136318, 4.580244969, 4.841277486, 5.083203692, 5.305068816, 5.505997257, 5.685196042, 5.841957955, 5.975664329, 6.085787487, 6.171892821,
        6.233640514, 6.270786876, 6.283185307];

    private readonly double[] sin2Hz = [0, 0.0626666167821521, 0.1243449435824270, 0.1840622763423390, 0.2408768370508580, 0.2938926261462370, 0.3422735529643440,
        0.3852566213878950, 0.4221639627510080, 0.4524135262330100, 0.4755282581475770, 0.4911436253643440, 0.4990133642141360, 0.4990133642141360, 0.4911436253643440,
        0.4755282581475770, 0.4524135262330100, 0.4221639627510070, 0.3852566213878950, 0.3422735529643440, 0.2938926261462360, 0.2408768370508570, 0.1840622763423390,
        0.1243449435824270, 0.0626666167821516, 0, -0.0626666167821524, -0.1243449435824280, -0.1840622763423390, -0.2408768370508580, -0.2938926261462370, -0.3422735529643450,
        -0.3852566213878950, -0.4221639627510080, -0.4524135262330100, -0.4755282581475770, -0.4911436253643450, -0.4990133642141360, -0.4990133642141360, -0.4911436253643440,
        -0.4755282581475760, -0.4524135262330090, -0.4221639627510070, -0.3852566213878940, -0.3422735529643440, -0.2938926261462360, -0.2408768370508560, -0.1840622763423380,
        -0.1243449435824260, -0.0626666167821506, 0, 0.0626666167821534, 0.1243449435824290, 0.1840622763423400, 0.2408768370508590, 0.2938926261462380, 0.3422735529643460,
        0.3852566213878960, 0.4221639627510090, 0.4524135262330100, 0.4755282581475770, 0.4911436253643450, 0.4990133642141360, 0.4990133642141360, 0.4911436253643440,
        0.4755282581475760, 0.4524135262330090, 0.4221639627510070, 0.3852566213878930, 0.3422735529643430, 0.2938926261462350, 0.2408768370508560, 0.1840622763423360,
        0.1243449435824250, 0.0626666167821493, 0, -0.0626666167821551, -0.1243449435824300, -0.1840622763423420, -0.2408768370508600, -0.2938926261462390, -0.3422735529643470,
        -0.3852566213878960, -0.4221639627510090, -0.4524135262330110, -0.4755282581475780, -0.4911436253643450, -0.4990133642141360, -0.4990133642141360, -0.4911436253643440,
        -0.4755282581475760, -0.4524135262330080, -0.4221639627510060, -0.3852566213878930, -0.3422735529643420, -0.2938926261462340, -0.2408768370508540, -0.1840622763423360,
        -0.1243449435824230, -0.0626666167821485, 0];

    private double[] Dsin2Hz = [6.283185307, 6.233640514, 6.085787487, 5.841957955, 5.505997257, 5.083203692, 4.580244969, 4.005053047, 3.366699045, 2.675250189,
        1.941611039, 1.177351523, 0.39452447, -0.39452447, -1.177351523, -1.941611039, -2.675250189, -3.366699045, -4.005053047, -4.580244969, -5.083203692, -5.505997257,
        -5.841957955, -6.085787487, -6.233640514, -6.283185307, -6.233640514, -6.085787487, -5.841957955, -5.505997257, -5.083203692, -4.580244969, -4.005053047, -3.366699045,
        -2.675250189, -1.941611039, -1.177351523, -0.39452447, 0.39452447, 1.177351523, 1.941611039, 2.675250189, 3.366699045, 4.005053047, 4.580244969, 5.083203692,
        5.505997257, 5.841957955, 6.085787487, 6.233640514, 6.283185307, 6.233640514, 6.085787487, 5.841957955, 5.505997257, 5.083203692, 4.580244969, 4.005053047, 3.366699045,
        2.675250189, 1.941611039, 1.177351523, 0.39452447, -0.39452447, -1.177351523, -1.941611039, -2.675250189, -3.366699045, -4.005053047, -4.580244969, -5.083203692,
        -5.505997257, -5.841957955, -6.085787487, -6.233640514, -6.283185307, -6.233640514, -6.085787487, -5.841957955, -5.505997257, -5.083203692, -4.580244969, -4.005053047,
        -3.366699045, -2.675250189, -1.941611039, -1.177351523, -0.39452447, 0.39452447, 1.177351523, 1.941611039, 2.675250189, 3.366699045, 4.005053047, 4.580244969,
        5.083203692, 5.505997257, 5.841957955, 6.085787487, 6.233640514, 6.283185307];

    private readonly double[] sinSum = [0, 0.125457136311465, 0.249678177146732, 0.371443590928064, 0.489566724215712, 0.602909620521184, 0.710398105649022,
        0.811035912952967, 0.903917636852723, 0.988240321212006, 1.063313510440050, 1.128567615113030, 1.183560470142820, 1.227981991635550, 1.261656868140130,
        1.284545252522520, 1.296741451735020, 1.298470642794870, 1.290083673853910, 1.272050038852600, 1.244949142441390, 1.209459998179490, 1.166349527071030,
        1.116459644896900, 1.060693345210420, 1, 0.935360111646119, 0.867769757732050, 0.798224974386349, 0.727706324077773, 0.657163890148916, 0.587502932923906,
        0.519570431078124, 0.454142717292855, 0.391914399269005, 0.333488736227370, 0.279369617411444, 0.229955263207275, 0.185533741714552, 0.146280364384345,
        0.112256994144896, 0.083413268745986, 0.059589711350707, 0.040522670177178, 0.025850999720333, 0.015124368228711, 0.007813050113997, 0.003319038243386,
        0.000988289981877, 0.000123902747161, 0, -0.000123902747161, -0.000988289981877, -0.003319038243386, -0.007813050113997, -0.015124368228711, -0.025850999720334,
        -0.040522670177179, -0.059589711350708, -0.083413268745988, -0.112256994144897, -0.146280364384346, -0.185533741714554, -0.229955263207277, -0.279369617411447,
        -0.333488736227373, -0.391914399269007, -0.454142717292858, -0.519570431078127, -0.587502932923909, -0.657163890148920, -0.727706324077776, -0.798224974386353,
        -0.867769757732053, -0.935360111646122, -1, -1.060693345210430, -1.116459644896910, -1.166349527071030, -1.209459998179490, -1.244949142441390, -1.272050038852600,
        -1.290083673853910, -1.298470642794870, -1.296741451735020, -1.284545252522520, -1.261656868140130, -1.227981991635550, -1.183560470142820, -1.128567615113030,
        -1.063313510440050, -0.988240321212001, -0.903917636852718, -0.811035912952963, -0.710398105649016, -0.602909620521178, -0.489566724215705, -0.371443590928057,
        -0.249678177146724, -0.125457136311458, 0];

    private double[] DsinSum = [12.56637061, 12.50442739, 12.319428, 12.01385078, 11.59178474, 11.05886802, 10.42220292, 9.690249088, 8.872696302, 7.980319005,
        7.024814731, 6.018629009, 4.974769439, 3.906611848, 2.827701524, 1.751552622, 0.691448857, -0.339751439, -1.329802858, -2.267250189, -3.141592654, -3.943432612,
        -4.664606432, -5.298295555, -5.839116045, -6.283185307, -6.628164984, -6.873279418, -7.019309478, -7.068561902, -7.024814731, -6.89323975, -6.680303236, -6.393646652,
        -6.041949234, -5.6347747, -5.182404569, -4.695660788, -4.185720499, -3.663925963, -3.141592654, -2.629818627, -2.139298211, -1.680142995, -1.261712986, -0.892460637,
        -0.57979023, -0.329934866, -0.147853028, -0.037146362, 0, -0.037146362, -0.147853028, -0.329934866, -0.57979023, -0.892460637, -1.261712986, -1.680142995, -2.139298211,
        -2.629818627, -3.141592654, -3.663925963, -4.185720499, -4.695660788, -5.182404569, -5.6347747, -6.041949234, -6.393646652, -6.680303236, -6.89323975, -7.024814731,
        -7.068561902, -7.019309478, -6.873279418, -6.628164984, -6.283185307, -5.839116045, -5.298295555, -4.664606432, -3.943432612, -3.141592654, -2.267250189, -1.329802858,
        -0.339751439, 0.691448857, 1.751552622, 2.827701524, 3.906611848, 4.974769439, 6.018629009, 7.024814731, 7.980319005, 8.872696302, 9.690249088, 10.42220292, 11.05886802,
        11.59178474, 12.01385078, 12.319428, 12.50442739, 12.56637061];

    [TestMethod]
    public void Test_Derivative_BackwardOnePoint()
    {
        Dsin1Hz = [double.NaN, 6.279051952931340, 6.254271403499090, 6.204808102142040, 6.130857257913020, 6.032710721009260, 5.910755830973060, 5.765473888039470,
            5.597438253664260, 5.407312087728140, 5.195845731347650, 4.963873745621650, 4.712311617999890, 4.442152149272280, 4.154461535437780, 3.850375159915830,
            3.531093112706760, 3.197875454184860, 2.852037242215590, 2.494943342223190, 2.128003040690220, 1.752664483347750, 1.370408960005750, 0.982745058578915,
            0.591202711379368, 0.197327157172844, -0.197327157172844, -0.591202711379379, -0.982745058578915, -1.370408960005760, -1.752664483347750, -2.128003040690230,
            -2.494943342223190, -2.852037242215600, -3.197875454184850, -3.531093112706770, -3.850375159915830, -4.154461535437780, -4.442152149272290, -4.712311617999910,
            -4.963873745621670, -5.195845731347650, -5.407312087728140, -5.597438253664230, -5.765473888039470, -5.910755830973060, -6.032710721009270, -6.130857257913020,
            -6.204808102142040, -6.254271403499090, -6.279051952931330, -6.279051952931340, -6.254271403499090, -6.204808102142040, -6.130857257913020, -6.032710721009270,
            -5.910755830973050, -5.765473888039460, -5.597438253664260, -5.407312087728090, -5.195845731347650, -4.963873745621660, -4.712311617999880, -4.442152149272280,
            -4.154461535437770, -3.850375159915840, -3.531093112706730, -3.197875454184830, -2.852037242215600, -2.494943342223160, -2.128003040690220, -1.752664483347730,
            -1.370408960005750, -0.982745058578892, -0.591202711379368, -0.197327157172822, 0.197327157172866, 0.591202711379379, 0.982745058578948, 1.370408960005760,
            1.752664483347760, 2.128003040690240, 2.494943342223200, 2.852037242215630, 3.197875454184850, 3.531093112706800, 3.850375159915810, 4.154461535437820,
            4.442152149272270, 4.712311617999950, 4.963873745621630, 5.195845731347710, 5.407312087728110, 5.597438253664230, 5.765473888039520, 5.910755830973020,
            6.032710721009320, 6.130857257912980, 6.204808102142090, 6.254271403499050, 6.279051952931390];

        Dsin2Hz = [double.NaN, 6.266661678215210, 6.167832680027530, 5.971733275991160, 5.681456070851870, 5.301578909537890, 4.838092681810780, 4.298306842355030,
            3.690734136311290, 3.024956348200230, 2.311473191456700, 1.561536721676750, 0.786973884979148, 0, -0.786973884979141, -1.561536721676750, -2.311473191456710,
            -3.024956348200220, -3.690734136311280, -4.298306842355030, -4.838092681810780, -5.301578909537890, -5.681456070851870, -5.971733275991160, -6.167832680027530,
            -6.266661678215210, -6.266661678215190, -6.167832680027530, -5.971733275991160, -5.681456070851870, -5.301578909537890, -4.838092681810770, -4.298306842355010,
            -3.690734136311290, -3.024956348200220, -2.311473191456700, -1.561536721676750, -0.786973884979130, 0, 0.786973884979158, 1.561536721676770, 2.311473191456720,
            3.024956348200240, 3.690734136311280, 4.298306842355040, 4.838092681810790, 5.301578909537900, 5.681456070851880, 5.971733275991170, 6.167832680027530,
            6.266661678215210, 6.266661678215210, 6.167832680027530, 5.971733275991160, 5.681456070851860, 5.301578909537890, 4.838092681810760, 4.298306842355020,
            3.690734136311270, 3.024956348200180, 2.311473191456680, 1.561536721676740, 0.786973884979125, -0, -0.786973884979169, -1.561536721676800, -2.311473191456710,
            -3.024956348200220, -3.690734136311340, -4.298306842355020, -4.838092681810830, -5.301578909537870, -5.681456070851920, -5.971733275991130, -6.167832680027580,
            -6.266661678215170, -6.266661678215260, -6.167832680027480, -5.971733275991190, -5.681456070851810, -5.301578909537840, -4.838092681810790, -4.298306842354970,
            -3.690734136311290, -3.024956348200170, -2.311473191456680, -1.561536721676710, -0.786973884979108, 0, 0.786973884979191, 1.561536721676790, 2.311473191456760,
            3.024956348200240, 3.690734136311300, 4.298306842355090, 4.838092681810770, 5.301578909537960, 5.681456070851850, 5.971733275991220, 6.167832680027500,
            6.266661678215260];
        
        DsinSum = [double.NaN, 12.5457136311465000, 12.4221040835266000, 12.1765413781332000, 11.8123133287649000, 11.3342896305471000, 10.7488485127838000, 10.0637807303945000,
            9.2881723899755500, 8.4322684359283600, 7.5073189228043600, 6.5254104672984000, 5.4992855029790300, 4.4421521492723100, 3.3674876504586200, 2.2888384382390800,
            1.2196199212500600, 0.1729191059846260, -0.8386968940957020, -1.8033635001318400, -2.7100896411205600, -3.5489144261901400, -4.3110471108461300, -4.9889882174122400,
            -5.5766299686481600, -6.0693345210423700, -6.4639888353880400, -6.7590353914069100, -6.9544783345700700, -7.0518650308576200, -7.0542433928856600, -6.9660957225009900,
            -6.7932501845782000, -6.5427713785268800, -6.2228318023850700, -5.8425663041634700, -5.4119118815925700, -4.9414354204169100, -4.4421521492722800, -3.9253377330207500,
            -3.4023370239448900, -2.8843725398909400, -2.3823557395279100, -1.9067041173529500, -1.4671670456844400, -1.0726631491622700, -0.7311318114713690, -0.4494011870611430,
            -0.2330748261508750, -0.0864387234715588, -0.0123902747161245, -0.0123902747161258, -0.0864387234715629, -0.2330748261508830, -0.4494011870611570, -0.7311318114713800,
            -1.0726631491622900, -1.4671670456844500, -1.9067041173529900, -2.3823557395279100, -2.8843725398909700, -3.4023370239449200, -3.9253377330207600, -4.4421521492723000,
            -4.9414354204169400, -5.4119118815926400, -5.8425663041634400, -6.2228318023850500, -6.5427713785269300, -6.7932501845781900, -6.9660957225010500, -7.0542433928856100,
            -7.0518650308576700, -6.9544783345700200, -6.7590353914069500, -6.4639888353880000, -6.0693345210423900, -5.5766299686481100, -4.9889882174122400, -4.3110471108460400,
            -3.5489144261900700, -2.7100896411205600, -1.8033635001317700, -0.8386968940956800, 0.1729191059846920, 1.2196199212501000, 2.2888384382391000, 3.3674876504587300,
            4.4421521492723000, 5.4992855029791300, 6.5254104672984400, 7.5073189228044700, 8.4322684359283500, 9.2881723899755300, 10.0637807303946000, 10.7488485127838000,
            11.3342896305473000, 11.8123133287648000, 12.1765413781333000, 12.4221040835265000, 12.5457136311466000];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.BackwardOnePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 1; i < Dsin1Hz.Length; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.BackwardOnePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 1; i < Dsin2Hz.Length; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sinSum, DerivativeMethod.BackwardOnePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 1; i < DsinSum.Length; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);
        

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.BackwardOnePoint, 0, 1, 100);
        for (int i = 1; i < Dsin1Hz.Length; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.BackwardOnePoint, 0, 1, 100);
        for (int i = 1; i < Dsin2Hz.Length; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.BackwardOnePoint, 0, 1, 100);
        for (int i = 1; i < DsinSum.Length; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);
    }

    [TestMethod]
    public void Test_Derivative_ForwardOnePoint()
    {
        Dsin1Hz = [6.279051952931340, 6.254271403499090, 6.204808102142040, 6.130857257913020, 6.032710721009260, 5.910755830973060, 5.765473888039470, 5.597438253664260,
            5.407312087728140, 5.195845731347650, 4.963873745621650, 4.712311617999890, 4.442152149272280, 4.154461535437780, 3.850375159915830, 3.531093112706760,
            3.197875454184860, 2.852037242215590, 2.494943342223190, 2.128003040690220, 1.752664483347750, 1.370408960005750, 0.982745058578915, 0.591202711379368,
            0.197327157172844, -0.197327157172844, -0.591202711379379, -0.982745058578915, -1.370408960005760, -1.752664483347750, -2.128003040690230, -2.494943342223190,
            -2.852037242215600, -3.197875454184850, -3.531093112706770, -3.850375159915830, -4.154461535437780, -4.442152149272290, -4.712311617999910, -4.963873745621670,
            -5.195845731347650, -5.407312087728140, -5.597438253664230, -5.765473888039470, -5.910755830973060, -6.032710721009270, -6.130857257913020, -6.204808102142040,
            -6.254271403499090, -6.279051952931330, -6.279051952931340, -6.254271403499090, -6.204808102142040, -6.130857257913020, -6.032710721009270, -5.910755830973050,
            -5.765473888039460, -5.597438253664260, -5.407312087728090, -5.195845731347650, -4.963873745621660, -4.712311617999880, -4.442152149272280, -4.154461535437770,
            -3.850375159915840, -3.531093112706730, -3.197875454184830, -2.852037242215600, -2.494943342223160, -2.128003040690220, -1.752664483347730, -1.370408960005750,
            -0.982745058578892, -0.591202711379368, -0.197327157172822, 0.197327157172866, 0.591202711379379, 0.982745058578948, 1.370408960005760, 1.752664483347760,
            2.128003040690240, 2.494943342223200, 2.852037242215630, 3.197875454184850, 3.531093112706800, 3.850375159915810, 4.154461535437820, 4.442152149272270,
            4.712311617999950, 4.963873745621630, 5.195845731347710, 5.407312087728110, 5.597438253664230, 5.765473888039520, 5.910755830973020, 6.032710721009320,
            6.130857257912980, 6.204808102142090, 6.254271403499050, 6.279051952931390, double.NaN];

        Dsin2Hz = [6.266661678215210, 6.167832680027530, 5.971733275991160, 5.681456070851870, 5.301578909537890, 4.838092681810780, 4.298306842355030, 3.690734136311290,
            3.024956348200230, 2.311473191456700, 1.561536721676750, 0.786973884979148, 0, -0.786973884979141, -1.561536721676750, -2.311473191456710, -3.024956348200220,
            -3.690734136311280, -4.298306842355030, -4.838092681810780, -5.301578909537890, -5.681456070851870, -5.971733275991160, -6.167832680027530, -6.266661678215210,
            -6.266661678215190, -6.167832680027530, -5.971733275991160, -5.681456070851870, -5.301578909537890, -4.838092681810770, -4.298306842355010, -3.690734136311290,
            -3.024956348200220, -2.311473191456700, -1.561536721676750, -0.786973884979130, 0, 0.786973884979158, 1.561536721676770, 2.311473191456720, 3.024956348200240,
            3.690734136311280, 4.298306842355040, 4.838092681810790, 5.301578909537900, 5.681456070851880, 5.971733275991170, 6.167832680027530, 6.266661678215210,
            6.266661678215210, 6.167832680027530, 5.971733275991160, 5.681456070851860, 5.301578909537890, 4.838092681810760, 4.298306842355020, 3.690734136311270,
            3.024956348200180, 2.311473191456680, 1.561536721676740, 0.786973884979125, 0, -0.786973884979169, -1.561536721676800, -2.311473191456710, -3.024956348200220,
            -3.690734136311340, -4.298306842355020, -4.838092681810830, -5.301578909537870, -5.681456070851920, -5.971733275991130, -6.167832680027580, -6.266661678215170,
            -6.266661678215260, -6.167832680027480, -5.971733275991190, -5.681456070851810, -5.301578909537840, -4.838092681810790, -4.298306842354970, -3.690734136311290,
            -3.024956348200170, -2.311473191456680, -1.561536721676710, -0.786973884979108, 0, 0.786973884979191, 1.561536721676790, 2.311473191456760, 3.024956348200240,
            3.690734136311300, 4.298306842355090, 4.838092681810770, 5.301578909537960, 5.681456070851850, 5.971733275991220, 6.167832680027500, 6.266661678215260, double.NaN];

        DsinSum = [12.5457136311465000, 12.4221040835266000, 12.1765413781332000, 11.8123133287649000, 11.3342896305471000, 10.7488485127838000, 10.0637807303945000,
            9.2881723899755500, 8.4322684359283600, 7.5073189228043600, 6.5254104672984000, 5.4992855029790300, 4.4421521492723100, 3.3674876504586200, 2.2888384382390800,
            1.2196199212500600, 0.1729191059846260, -0.8386968940957020, -1.8033635001318400, -2.7100896411205600, -3.5489144261901400, -4.3110471108461300, -4.9889882174122400,
            -5.5766299686481600, -6.0693345210423700, -6.4639888353880400, -6.7590353914069100, -6.9544783345700700, -7.0518650308576200, -7.0542433928856600, -6.9660957225009900,
            -6.7932501845782000, -6.5427713785268800, -6.2228318023850700, -5.8425663041634700, -5.4119118815925700, -4.9414354204169100, -4.4421521492722800, -3.9253377330207500,
            -3.4023370239448900, -2.8843725398909400, -2.3823557395279100, -1.9067041173529500, -1.4671670456844400, -1.0726631491622700, -0.7311318114713690, -0.4494011870611430,
            -0.2330748261508750, -0.0864387234715588, -0.0123902747161245, -0.0123902747161258, -0.0864387234715629, -0.2330748261508830, -0.4494011870611570, -0.7311318114713800,
            -1.0726631491622900, -1.4671670456844500, -1.9067041173529900, -2.3823557395279100, -2.8843725398909700, -3.4023370239449200, -3.9253377330207600, -4.4421521492723000,
            -4.9414354204169400, -5.4119118815926400, -5.8425663041634400, -6.2228318023850500, -6.5427713785269300, -6.7932501845781900, -6.9660957225010500, -7.0542433928856100,
            -7.0518650308576700, -6.9544783345700200, -6.7590353914069500, -6.4639888353880000, -6.0693345210423900, -5.5766299686481100, -4.9889882174122400, -4.3110471108460400,
            -3.5489144261900700, -2.7100896411205600, -1.8033635001317700, -0.8386968940956800, 0.1729191059846920, 1.2196199212501000, 2.2888384382391000, 3.3674876504587300,
            4.4421521492723000, 5.4992855029791300, 6.5254104672984400, 7.5073189228044700, 8.4322684359283500, 9.2881723899755300, 10.0637807303946000, 10.7488485127838000,
            11.3342896305473000, 11.8123133287648000, 12.1765413781333000, 12.4221040835265000, 12.5457136311466000, double.NaN];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.ForwardOnePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 0; i < Dsin1Hz.Length - 1; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.ForwardOnePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 0; i < Dsin2Hz.Length - 1; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sinSum, DerivativeMethod.ForwardOnePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 0; i < DsinSum.Length - 1; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.ForwardOnePoint, 0, 1, 100);
        for (int i = 0; i < Dsin1Hz.Length - 1; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.ForwardOnePoint, 0, 1, 100);
        for (int i = 0; i < Dsin2Hz.Length - 1; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.ForwardOnePoint, 0, 1, 100);
        for (int i = 0; i < DsinSum.Length - 1; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);
    }

    [TestMethod]
    public void Test_Derivative_CenteredThreePoint()
    {
        Dsin1Hz = [double.NaN, 6.266661678215210, 6.229539752820560, 6.167832680027530, 6.081783989461140, 5.971733275991160, 5.838114859506260, 5.681456070851870,
            5.502375170696200, 5.301578909537890, 5.079859738484650, 4.838092681810770, 4.577231883636090, 4.298306842355030, 4.002418347676800, 3.690734136311290,
            3.364484283445810, 3.024956348200220, 2.673490292219390, 2.311473191456700, 1.940333762018980, 1.561536721676750, 1.176577009292330, 0.786973884979141,
            0.394264934276106, 0, -0.394264934276111, -0.786973884979147, -1.176577009292340, -1.561536721676760, -1.940333762018990, -2.311473191456710, -2.673490292219390,
            -3.024956348200220, -3.364484283445810, -3.690734136311300, -4.002418347676800, -4.298306842355030, -4.577231883636100, -4.838092681810790, -5.079859738484660,
            -5.301578909537900, -5.502375170696190, -5.681456070851850, -5.838114859506270, -5.971733275991160, -6.081783989461150, -6.167832680027530, -6.229539752820570,
            -6.266661678215200, -6.279051952931350, -6.266661678215210, -6.229539752820560, -6.167832680027530, -6.081783989461140, -5.971733275991160, -5.838114859506260,
            -5.681456070851860, -5.502375170696180, -5.301578909537870, -5.079859738484660, -4.838092681810770, -4.577231883636080, -4.298306842355020, -4.002418347676800,
            -3.690734136311280, -3.364484283445780, -3.024956348200210, -2.673490292219380, -2.311473191456690, -1.940333762018970, -1.561536721676740, -1.176577009292320,
            -0.786973884979130, -0.394264934276095, 0, 0.394264934276123, 0.786973884979163, 1.176577009292360, 1.561536721676760, 1.940333762019000, 2.311473191456720,
            2.673490292219410, 3.024956348200240, 3.364484283445830, 3.690734136311300, 4.002418347676810, 4.298306842355040, 4.577231883636110, 4.838092681810790,
            5.079859738484670, 5.301578909537910, 5.502375170696170, 5.681456070851880, 5.838114859506270, 5.971733275991170, 6.081783989461150, 6.167832680027530,
            6.229539752820570, 6.266661678215220, double.NaN];

        Dsin2Hz = [double.NaN, 6.217247179121370, 6.069782978009340, 5.826594673421510, 5.491517490194880, 5.069835795674330, 4.568199762082900, 3.994520489333160,
            3.357845242255760, 2.668214769828460, 1.936504956566730, 1.174255303327950, 0.393486942489574, -0.393486942489571, -1.174255303327950, -1.936504956566730,
            -2.668214769828460, -3.357845242255750, -3.994520489333160, -4.568199762082910, -5.069835795674340, -5.491517490194880, -5.826594673421520, -6.069782978009350,
            -6.217247179121360, -6.266661678215210, -6.217247179121360, -6.069782978009350, -5.826594673421510, -5.491517490194880, -5.069835795674330, -4.568199762082890,
            -3.994520489333150, -3.357845242255750, -2.668214769828460, -1.936504956566720, -1.174255303327940, -0.393486942489560, 0.393486942489584, 1.174255303327970,
            1.936504956566750, 2.668214769828480, 3.357845242255760, 3.994520489333160, 4.568199762082920, 5.069835795674350, 5.491517490194890, 5.826594673421520,
            6.069782978009350, 6.217247179121350, 6.266661678215230, 6.217247179121370, 6.069782978009340, 5.826594673421510, 5.491517490194870, 5.069835795674320,
            4.568199762082890, 3.994520489333140, 3.357845242255730, 2.668214769828430, 1.936504956566710, 1.174255303327930, 0.393486942489551, -0.393486942489596,
            -1.174255303327980, -1.936504956566750, -2.668214769828470, -3.357845242255780, -3.994520489333180, -4.568199762082920, -5.069835795674350, -5.491517490194900,
            -5.826594673421530, -6.069782978009350, -6.217247179121380, -6.266661678215220, -6.217247179121370, -6.069782978009340, -5.826594673421500, -5.491517490194830,
            -5.069835795674320, -4.568199762082880, -3.994520489333130, -3.357845242255730, -2.668214769828430, -1.936504956566700, -1.174255303327910, -0.393486942489532,
            0.393486942489618, 1.174255303327990, 1.936504956566770, 2.668214769828500, 3.357845242255770, 3.994520489333200, 4.568199762082930, 5.069835795674360,
            5.491517490194900, 5.826594673421530, 6.069782978009360, 6.217247179121380, double.NaN];

        DsinSum = [double.NaN, 12.483908857336600, 12.299322730829900, 11.994427353449000, 11.573301479656000, 11.041569071665500, 10.406314621589200, 9.675976560185030,
            8.860220412951960, 7.969793679366360, 7.016364695051380, 6.012347985138710, 4.970718826125670, 3.904819899865470, 2.828163044348850, 1.754229179744570,
            0.696269513617342, -0.332888894055538, -1.321030197113770, -2.256726570626200, -3.129502033655350, -3.929980768518130, -4.650017664129190, -5.282809093030200,
            -5.822982244845250, -6.266661678215210, -6.611512113397480, -6.856756862988490, -7.003171682713850, -7.053054211871640, -7.010169557693320, -6.879672953539590,
            -6.668010781552540, -6.382801590455970, -6.032699053274270, -5.627239092878020, -5.176673651004740, -4.691793784844590, -4.183744941146510, -3.663837378482820,
            -3.143354781917910, -2.633364139709420, -2.144529928440430, -1.686935581518690, -1.269915097423350, -0.901897480316818, -0.590266499266256, -0.341238006606009,
            -0.159756774811217, -0.049414499093842, -0.012390274716125, -0.049414499093844, -0.159756774811223, -0.341238006606020, -0.590266499266269, -0.901897480316834,
            -1.269915097423370, -1.686935581518720, -2.144529928440450, -2.633364139709440, -3.143354781917950, -3.663837378482840, -4.183744941146530, -4.691793784844620,
            -5.176673651004790, -5.627239092878040, -6.032699053274240, -6.382801590455990, -6.668010781552560, -6.879672953539620, -7.010169557693330, -7.053054211871640,
            -7.003171682713840, -6.856756862988480, -6.611512113397470, -6.266661678215190, -5.822982244845250, -5.282809093030180, -4.650017664129140, -3.929980768518060,
            -3.129502033655320, -2.256726570626160, -1.321030197113730, -0.332888894055494, 0.696269513617397, 1.754229179744600, 2.828163044348920, 3.904819899865520,
            4.970718826125720, 6.012347985138780, 7.016364695051450, 7.969793679366410, 8.860220412951940, 9.675976560185080, 10.406314621589200, 11.041569071665500,
            11.573301479656100, 11.994427353449100, 12.299322730829900, 12.483908857336600, double.NaN];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.CenteredThreePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 1; i < Dsin1Hz.Length - 1; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.CenteredThreePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 1; i < Dsin2Hz.Length - 1; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sinSum, DerivativeMethod.CenteredThreePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 1; i < DsinSum.Length - 1; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.CenteredThreePoint, 0, 1, 100);
        for (int i = 1; i < Dsin1Hz.Length - 1; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredThreePoint, 0, 1, 100);
        for (int i = 1; i < Dsin2Hz.Length - 1; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredThreePoint, 0, 1, 100);
        for (int i = 1; i < DsinSum.Length - 1; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);
    }

    [TestMethod]
    public void Test_Derivative_CenteredFivePoint()
    {
        Dsin1Hz = [double.NaN, double.NaN, 6.23363727738696, 6.17188961632309, 6.08578432661174, 5.97566122649364, 5.84195492153452, 5.68519308943541, 5.50599439752997,
            5.30506606118705, 5.08320105275476, 4.84127497206091, 4.58024259082048, 4.3011340845879, 4.00505096712468, 3.69316174322796, 3.36669729717582,
            3.02694603498943, 2.67524879968303, 2.31299357956921, 1.94161003050307, 1.56256383368379, 1.17735091128046, 0.787491522710782, 0.394524264871616,
            0, -0.394524264871626, -0.787491522710788, -1.17735091128047, -1.56256383368379, -1.94161003050308, -2.31299357956921, -2.67524879968303, -3.02694603498943,
            -3.36669729717583, -3.69316174322796, -4.00505096712468, -4.3011340845879, -4.5802425908205, -4.84127497206092, -5.08320105275477, -5.30506606118706,
            -5.50599439752996, -5.68519308943539, -5.84195492153452, -5.97566122649365, -6.08578432661174, -6.17188961632309, -6.23363727738697, -6.27078361999494,
            -6.28318204450339, -6.27078361999497, -6.23363727738696, -6.17188961632309, -6.08578432661174, -5.97566122649365, -5.84195492153451, -5.68519308943541,
            -5.50599439752995, -5.30506606118702, -5.08320105275477, -4.8412749720609, -4.58024259082047, -4.30113408458788, -4.00505096712469, -3.69316174322795,
            -3.36669729717578, -3.02694603498943, -2.67524879968302, -2.31299357956919, -1.94161003050306, -1.56256383368377, -1.17735091128045, -0.787491522710771,
            -0.394524264871605, 0, 0.394524264871632, 0.787491522710803, 1.17735091128049, 1.562563833683790, 1.94161003050309, 2.31299357956922, 2.67524879968306,
            3.02694603498945, 3.36669729717584, 3.69316174322797, 4.00505096712469, 4.3011340845879, 4.58024259082051, 4.84127497206092, 5.08320105275478, 5.30506606118707,
            5.50599439752993, 5.68519308943543, 5.84195492153452, 5.97566122649366, 6.08578432661175, 6.17188961632309, 6.23363727738696, double.NaN, double.NaN];

        Dsin2Hz = [double.NaN, double.NaN, 6.08573699525531, 5.84190948652798, 5.50595157541053, 5.08316151885282, 4.58020696860929, 4.00501981838777, 3.36667111314741,
            2.67522799330087, 1.94159492989623, 1.17734175459455, 0.394521196513035, -0.394521196513032, -1.17734175459454, -1.94159492989624, -2.67522799330087,
            -3.3666711131474, -4.00501981838777, -4.5802069686093, -5.08316151885282, -5.50595157541053, -5.84190948652798, -6.08573699525532, -6.23358879612439,
            -6.28313317791315, -6.23358879612439, -6.08573699525531, -5.84190948652798, -5.50595157541053, -5.08316151885281, -4.58020696860927, -4.00501981838776,
            -3.3666711131474, -2.67522799330086, -1.94159492989623, -1.17734175459454, -0.394521196513022, 0.394521196513045, 1.17734175459457, 1.94159492989625,
            2.67522799330089, 3.36667111314741, 4.00501981838776, 4.5802069686093, 5.08316151885283, 5.50595157541054, 5.84190948652799, 6.08573699525532, 6.23358879612438,
            6.28313317791317, 6.23358879612441, 6.08573699525531, 5.84190948652797, 5.50595157541053, 5.0831615188528, 4.58020696860928, 4.00501981838776, 3.36667111314737,
            2.67522799330084, 1.94159492989622, 1.17734175459453, 0.394521196513012, -0.394521196513055, -1.17734175459458, -1.94159492989627, -2.67522799330087,
            -3.36667111314744, -4.00501981838779, -4.58020696860931, -5.08316151885283, -5.50595157541055, -5.84190948652799, -6.08573699525532, -6.23358879612441,
            -6.28313317791316, -6.2335887961244, -6.0857369952553, -5.84190948652798, -5.50595157541047, -5.0831615188528, -4.58020696860927, -4.00501981838774,
            -3.36667111314738, -2.67522799330083, -1.94159492989621, -1.17734175459451, -0.394521196512995, 0.394521196513082, 1.17734175459459, 1.94159492989628,
            2.67522799330091, 3.36667111314741, 4.00501981838781, 4.58020696860932, 5.08316151885284, 5.50595157541055, 5.841909486528, 6.08573699525532, double.NaN, double.NaN];

        DsinSum = [double.NaN, double.NaN, 12.3193742726423, 12.0137991028511, 11.5917359020223, 11.0588227453465, 10.4221618901438, 9.69021290782318, 8.87266551067738,
            7.98029405448792, 7.02479598265099, 6.01861672665545, 4.97476378733353, 3.90661288807487, 2.82770921253012, 1.75156681333172, 0.691469303874951, -0.339725078157982,
            -1.32977101870474, -2.26721338904007, -3.14155148834974, -3.94338774172675, -4.66455857524753, -5.29824547254453, -5.83906453125277, -6.28313317791316,
            -6.62811306099602, -6.87322851796611, -7.01926039780844, -7.06851540909432, -7.02477154935589, -6.89320054817848, -6.68026861807079, -6.39361714813683,
            -6.04192529047669, -5.63475667312419, -5.18239272171922, -4.69565528110091, -4.18572139430745, -3.66393321746635, -3.14160612285851, -2.62983806788617,
            -2.13932328438255, -1.68017327104763, -1.26174795292522, -0.892499707640822, -0.579832751201204, -0.3299801297951, -0.147900282131647, -0.037194823870565,
            -0.000048866590219, -0.037194823870568, -0.147900282131653, -0.329980129795112, -0.579832751201216, -0.89249970764084, -1.26174795292523, -1.68017327104766,
            -2.13932328438257, -2.62983806788619, -3.14160612285855, -3.66393321746637, -4.18572139430746, -4.69565528110094, -5.18239272171927, -5.63475667312421,
            -6.04192529047665, -6.39361714813685, -6.68026861807081, -6.89320054817851, -7.0247715493559, -7.06851540909432, -7.01926039780843, -6.87322851796609,
            -6.62811306099602, -6.28313317791314, -5.83906453125277, -5.29824547254451, -4.66455857524748, -3.94338774172666, -3.14155148834972, -2.26721338904004,
            -1.32977101870468, -0.339725078157937, 0.691469303875013, 1.75156681333175, 2.82770921253021, 3.90661288807492, 4.97476378733357, 6.01861672665551, 7.02479598265107,
            7.98029405448798, 8.87266551067734, 9.69021290782324, 10.4221618901438, 11.0588227453465, 11.5917359020223, 12.0137991028511, 12.3193742726423, double.NaN, double.NaN];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.CenteredFivePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 2; i < Dsin1Hz.Length - 2; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.CenteredFivePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 2; i < Dsin2Hz.Length - 2; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sinSum, DerivativeMethod.CenteredFivePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 2; i < DsinSum.Length - 2; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.CenteredFivePoint, 0, 1, 100);
        for (int i = 2; i < Dsin1Hz.Length - 2; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredFivePoint, 0, 1, 100);
        for (int i = 2; i < Dsin2Hz.Length - 2; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredFivePoint, 0, 1, 100);
        for (int i = 2; i < DsinSum.Length - 2; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);
    }

    [TestMethod]
    public void Test_Derivative_CenteredSevenPoint()
    {
        Dsin1Hz = [double.NaN, double.NaN, double.NaN, 6.17189281849791, 6.08578748411237, 5.97566432685887, 5.84195795252861, 5.68519603909642, 5.50599725421694,
            5.30506881362593, 5.08320369008294, 4.84127748387006, 4.58024496719764, 4.30113631615459, 4.00505304507393, 3.69316365935904, 3.36669904392666,
            3.02694760546638, 2.67525018768814, 2.31299477962466, 1.94161103787279, 1.56256464439214, 1.17735152212798, 0.78749193128672, 0.39452446956349, 0,
            -0.394524469563503, -0.787491931286711, -1.17735152212798, -1.56256464439216, -1.94161103787281, -2.31299477962468, -2.67525018768816, -3.02694760546638,
            -3.36669904392666, -3.69316365935905, -4.00505304507393, -4.30113631615459, -4.58024496719765, -4.84127748387007, -5.08320369008295, -5.30506881362595,
            -5.50599725421692, -5.6851960390964, -5.84195795252861, -5.97566432685887, -6.08578748411237, -6.17189281849791, -6.23364051159847, -6.27078687347916,
            -6.2831853044203, -6.27078687347919, -6.23364051159846, -6.17189281849791, -6.08578748411237, -5.97566432685887, -5.8419579525286, -5.68519603909642,
            -5.50599725421691, -5.30506881362591, -5.08320369008295, -4.84127748387006, -4.58024496719764, -4.30113631615457, -4.00505304507393, -3.69316365935904,
            -3.36669904392662, -3.02694760546638, -2.67525018768814, -2.31299477962465, -1.94161103787279, -1.56256464439214, -1.17735152212797, -0.787491931286701,
            -0.394524469563475, 0, 0.394524469563512, 0.787491931286735, 1.17735152212801, 1.56256464439217, 1.94161103787281, 2.31299477962467, 2.67525018768818,
            3.02694760546641, 3.36669904392669, 3.69316365935904, 4.00505304507394, 4.3011363161546, 4.58024496719766, 4.84127748387008, 5.08320369008296, 5.30506881362596,
            5.50599725421689, 5.68519603909645, 5.84195795252861, 5.97566432685888, 6.08578748411238, 6.17189281849792, double.NaN, double.NaN, double.NaN];

        Dsin2Hz = [double.NaN, double.NaN, double.NaN, 5.84195779127825, 5.5059971022398, 5.0832035497758, 4.58024484077322, 4.005052934526, 3.36669895099866, 2.6752501138456,
            1.94161098428024, 1.1773514896306, 0.39452445867379, -0.394524458673794, -1.17735148963059, -1.94161098428024, -2.6752501138456, -3.36669895099865, -4.00505293452601,
            -4.58024484077323, -5.0832035497758, -5.50599710223981, -5.84195779127824, -6.0857873161318, -6.23364033953682, -6.28318513099112, -6.23364033953682, -6.0857873161318,
            -5.84195779127824, -5.5059971022398, -5.0832035497758, -4.58024484077321, -4.00505293452599, -3.36669895099866, -2.6752501138456, -1.94161098428023, -1.17735148963058,
            -0.394524458673782, 0.394524458673803, 1.17735148963061, 1.94161098428025, 2.67525011384562, 3.36669895099866, 4.005052934526, 4.58024484077324, 5.08320354977581,
            5.50599710223981, 5.84195779127825, 6.08578731613181, 6.23364033953681, 6.28318513099114, 6.23364033953684, 6.0857873161318, 5.84195779127824, 5.5059971022398,
            5.08320354977579, 4.58024484077321, 4.005052934526, 3.36669895099863, 2.67525011384558, 1.94161098428022, 1.17735148963057, 0.394524458673767, -0.394524458673814,
            -1.17735148963063, -1.94161098428027, -2.67525011384559, -3.36669895099869, -4.00505293452602, -4.58024484077325, -5.08320354977582, -5.50599710223983,
            -5.84195779127826, -6.08578731613181, -6.23364033953684, -6.28318513099113, -6.23364033953683, -6.08578731613179, -5.84195779127824, -5.50599710223973,
            -5.08320354977579, -4.5802448407732, -4.00505293452598, -3.36669895099864, -2.67525011384556, -1.94161098428021, -1.17735148963055, -0.394524458673757,
            0.39452445867384, 1.17735148963063, 1.94161098428029, 2.67525011384565, 3.36669895099866, 4.00505293452605, 4.58024484077325, 5.08320354977583, 5.50599710223983,
            5.84195779127826, double.NaN, double.NaN, double.NaN];

        DsinSum = [double.NaN, double.NaN, double.NaN, 12.0138506097762, 11.5917845863522, 11.0588678766347, 10.4222027933018, 9.69024897362243, 8.8726962052156, 7.98031892747154,
            7.02481467436318, 6.01862897350064, 4.97476942587144, 3.90661185748081, 2.82770155544333, 1.75155267507881, 0.691448930081058, -0.339751345532284, -1.32980274683787,
            -2.26725006114856, -3.14159251190299, -3.94343245784766, -4.66460626915027, -5.29829538484508, -5.83911586997333, -6.28318513099112, -6.62816480910033,
            -6.87327924741852, -7.01930931340621, -7.06856174663197, -7.02481458764861, -6.89323962039787, -6.68030312221415, -6.39364655646504, -6.04194915777225,
            -5.63477464363928, -5.18240453470451, -4.69566077482836, -4.18572050852385, -3.66392599423946, -3.1415927058027, -2.62981869978033, -2.13929830321827,
            -1.6801431045704, -1.26171311175537, -0.892460777083061, -0.579790381872563, -0.329935027219661, -0.147853195466657, -0.03714653394235, -0.000000173429167,
            -0.037146533942352, -0.147853195466663, -0.329935027219673, -0.579790381872575, -0.89246077708308, -1.26171311175539, -1.68014310457043, -2.13929830321828,
            -2.62981869978034, -3.14159270580273, -3.66392599423948, -4.18572050852387, -4.69566077482838, -5.18240453470457, -5.6347746436393, -6.04194915777221,
            -6.39364655646507, -6.68030312221416, -6.8932396203979, -7.02481458764861, -7.06856174663196, -7.01930931340622, -6.8732792474185, -6.62816480910032,
            -6.28318513099111, -5.83911586997332, -5.29829538484505, -4.66460626915024, -3.94343245784756, -3.14159251190298, -2.26725006114853, -1.32980274683782,
            -0.339751345532248, 0.691448930081119, 1.75155267507883, 2.8277015554434, 3.90661185748085, 4.97476942587148, 6.01862897350072, 7.02481467436325, 7.98031892747161,
            8.87269620521556, 9.6902489736225, 10.4222027933019, 11.0588678766347, 11.5917845863522, 12.0138506097762, double.NaN, double.NaN, double.NaN];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.CenteredSevenPoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 3; i < Dsin1Hz.Length - 3; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.CenteredSevenPoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 3; i < Dsin2Hz.Length - 3; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate(sinSum, DerivativeMethod.CenteredSevenPoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 3; i < DsinSum.Length - 3; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.CenteredSevenPoint, 0, 1, 100);
        for (int i = 3; i < Dsin1Hz.Length - 3; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredSevenPoint, 0, 1, 100);
        for (int i = 3; i < Dsin2Hz.Length - 3; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-12);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredSevenPoint, 0, 1, 100);
        for (int i = 3; i < DsinSum.Length - 3; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-12);
    }

    [TestMethod]
    public void Test_Derivative_CenteredNinePoint()
    {
        

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.CenteredNinePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 4; i < Dsin1Hz.Length - 4; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-9);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.CenteredNinePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 4; i < Dsin2Hz.Length - 4; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-9);

        result = Derivative.Derivate(sinSum, DerivativeMethod.CenteredNinePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 4; i < DsinSum.Length - 4; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-8);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.CenteredNinePoint, 0, 1, 100);
        for (int i = 4; i < Dsin1Hz.Length - 4; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-9);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredNinePoint, 0, 1, 100);
        for (int i = 4; i < Dsin2Hz.Length - 4; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-9);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.CenteredNinePoint, 0, 1, 100);
        for (int i = 4; i < DsinSum.Length - 4; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-8);
    }

    [TestMethod]
    public void Test_Derivative_SGLinearThreePoint()
    {
        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGLinearThreePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 1; i < Dsin1Hz.Length - 1; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGLinearThreePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 1; i < Dsin2Hz.Length - 1; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-1);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGLinearThreePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 1; i < DsinSum.Length - 1; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-1);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGLinearThreePoint, 0, 1, 100);
        for (int i = 1; i < Dsin1Hz.Length - 1; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearThreePoint, 0, 1, 100);
        for (int i = 1; i < Dsin2Hz.Length - 1; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-1);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearThreePoint, 0, 1, 100);
        for (int i = 1; i < DsinSum.Length - 1; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-1);
    }

    [TestMethod]
    public void Test_Derivative_SGLinearFivePoint()
    {
        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGLinearFivePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 2; i < Dsin1Hz.Length - 2; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGLinearFivePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 2; i < Dsin2Hz.Length - 2; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-1);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGLinearFivePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 2; i < DsinSum.Length - 2; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-1);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGLinearFivePoint, 0, 1, 100);
        for (int i = 2; i < Dsin1Hz.Length - 2; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearFivePoint, 0, 1, 100);
        for (int i = 2; i < Dsin2Hz.Length - 2; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-1);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearFivePoint, 0, 1, 100);
        for (int i = 2; i < DsinSum.Length - 2; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-1);
    }

    [TestMethod]
    public void Test_Derivative_SGLinearSevenPoint()
    {
        //Dsin1Hz = [double.NaN, double.NaN, double.NaN, 6.143511647663760, 6.057802264775890, 5.948185503895540, 5.815093972298800, 5.659052921457110, 5.480678174109790,
        //    5.280673693892950, 5.059828807116630, 4.819015087654520, 4.559182917240030, 4.281357734743720, 3.986635989234680, 3.676180812796870, 3.351217430178200,
        //    3.013028323388230, 2.662948170327560, 2.302358577423890, 1.932682627062710, 1.555379261331230, 1.171937524240460, 0.783870685148836, 0.392710266579383,
        //    0, -0.392710266579389, -0.783870685148839, -1.171937524240460, -1.555379261331230, -1.932682627062720, -2.302358577423900, -2.662948170327560, -3.013028323388240,
        //    -3.351217430178210, -3.676180812796870, -3.986635989234680, -4.281357734743730, -4.559182917240030, -4.819015087654530, -5.059828807116630, -5.280673693892940,
        //    -5.480678174109790, -5.659052921457110, -5.815093972298790, -5.948185503895540, -6.057802264775890, -6.143511647663760, -6.204975396781790, -6.241950942792340,
        //    -6.254292360107860, -6.241950942792340, -6.204975396781800, -6.143511647663760, -6.057802264775890, -5.948185503895540, -5.815093972298790, -5.659052921457100,
        //    -5.480678174109780, -5.280673693892930, -5.059828807116620, -4.819015087654520, -4.559182917240020, -4.281357734743720, -3.986635989234670, -3.676180812796860,
        //    -3.351217430178190, -3.013028323388220, -2.662948170327540, -2.302358577423880, -1.932682627062710, -1.555379261331210, -1.171937524240450, -0.783870685148824,
        //    -0.392710266579369, 0, 0.392710266579403, 0.783870685148852, 1.171937524240480, 1.555379261331240, 1.932682627062730, 2.302358577423910, 2.662948170327580,
        //    3.013028323388250, 3.351217430178220, 3.676180812796880, 3.986635989234700, 4.281357734743740, 4.559182917240040, 4.819015087654540, 5.059828807116640,
        //    5.280673693892950, 5.480678174109790, 5.659052921457120, 5.815093972298790, 5.948185503895550, 6.057802264775890, 6.143511647663770, double.NaN, double.NaN, double.NaN];

        //Dsin2Hz = [double.NaN, double.NaN, double.NaN, 5.735016325320120, 5.405205651374850, 4.990151655394060, 4.496399986835610, 3.931737404465590, 3.305068974521080,
        //    2.626277632495870, 1.906068323343980, 1.155799178102930, 0.387302389382242, -0.387302389382241, -1.155799178102930, -1.906068323343980, -2.626277632495870,
        //    -3.305068974521080, -3.931737404465600, -4.496399986835610, -4.990151655394070, -5.405205651374860, -5.735016325320120, -5.974382365882380, -6.119528827611650,
        //    -6.168166664100180, -6.119528827611650, -5.974382365882380, -5.735016325320110, -5.405205651374850, -4.990151655394060, -4.496399986835600, -3.931737404465590,
        //    -3.305068974521080, -2.626277632495860, -1.906068323343970, -1.155799178102920, -0.387302389382231, 0.387302389382257, 1.155799178102950, 1.906068323343990,
        //    2.626277632495880, 3.305068974521090, 3.931737404465600, 4.496399986835620, 4.990151655394070, 5.405205651374860, 5.735016325320120, 5.974382365882390,
        //    6.119528827611660, 6.168166664100200, 6.119528827611650, 5.974382365882380, 5.735016325320110, 5.405205651374850, 4.990151655394060, 4.496399986835590,
        //    3.931737404465580, 3.305068974521060, 2.626277632495840, 1.906068323343960, 1.155799178102910, 0.387302389382219, -0.387302389382266, -1.155799178102950,
        //    -1.906068323344000, -2.626277632495890, -3.305068974521100, -3.931737404465610, -4.496399986835630, -4.990151655394080, -5.405205651374870, -5.735016325320130,
        //    -5.974382365882400, -6.119528827611670, -6.168166664100170, -6.119528827611660, -5.974382365882370, -5.735016325320100, -5.405205651374830, -4.990151655394040,
        //    -4.496399986835580, -3.931737404465570, -3.305068974521050, -2.626277632495830, -1.906068323343950, -1.155799178102900, -0.387302389382203, 0.387302389382285,
        //    1.155799178102970, 1.906068323344020, 2.626277632495900, 3.305068974521120, 3.931737404465630, 4.496399986835630, 4.990151655394090, 5.405205651374880,
        //    5.735016325320130, double.NaN, double.NaN, double.NaN];

        //DsinSum = [double.NaN, double.NaN, double.NaN, 11.878527972983900, 11.463007916150700, 10.938337159289600, 10.311493959134400, 9.590790325922710, 8.785747148630880,
        //    7.906951326388810, 6.965897130460610, 5.974814265757460, 4.946485306622270, 3.894055345361480, 2.830836811131750, 1.770112489452890, 0.724939797682331,
        //    -0.292040651132853, -1.268789234138040, -2.194041409411720, -3.057469028331350, -3.849826390043630, -4.563078801079660, -5.190511680733550, -5.726818561032270,
        //    -6.168166664100190, -6.512239094191040, -6.758253051031220, -6.906953849560580, -6.960584912706080, -6.922834282456780, -6.798758564259500, -6.594685574793150,
        //    -6.318097297909310, -5.977495062674060, -5.582249136140840, -5.142435167337610, -4.668660124125960, -4.171880527857770, -3.663215909551580, -3.153760483772640,
        //    -2.654396061397070, -2.175609199588700, -1.727315516991500, -1.318693985463180, -0.958033848501471, -0.652596613401027, -0.408495322343640, -0.230593030899408,
        //    -0.122422115180687, -0.086125696007657, -0.122422115180690, -0.230593030899414, -0.408495322343650, -0.652596613401040, -0.958033848501487, -1.318693985463190,
        //    -1.727315516991520, -2.175609199588720, -2.654396061397090, -3.153760483772660, -3.663215909551610, -4.171880527857800, -4.668660124125980, -5.142435167337630,
        //    -5.582249136140860, -5.977495062674080, -6.318097297909320, -6.594685574793160, -6.798758564259510, -6.922834282456790, -6.960584912706080, -6.906953849560570,
        //    -6.758253051031220, -6.512239094191030, -6.168166664100150, -5.726818561032260, -5.190511680733520, -4.563078801079630, -3.849826390043590, -3.057469028331310,
        //    -2.194041409411670, -1.268789234138000, -0.292040651132809, 0.724939797682384, 1.770112489452940, 2.830836811131800, 3.894055345361530, 4.946485306622330,
        //    5.974814265757520, 6.965897130460660, 7.906951326388860, 8.785747148630910, 9.590790325922740, 10.311493959134400, 10.938337159289600, 11.463007916150800,
        //    11.878527972983900, double.NaN, double.NaN, double.NaN];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGLinearSevenPoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 3; i < Dsin1Hz.Length - 3; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGLinearSevenPoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 3; i < Dsin2Hz.Length - 3; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-0);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGLinearSevenPoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 3; i < DsinSum.Length - 3; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-0);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGLinearSevenPoint, 0, 1, 100);
        for (int i = 3; i < Dsin1Hz.Length - 3; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearSevenPoint, 0, 1, 100);
        for (int i = 3; i < Dsin2Hz.Length - 3; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-0);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearSevenPoint, 0, 1, 100);
        for (int i = 3; i < DsinSum.Length - 3; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-0);
    }

    [TestMethod]
    public void Test_Derivative_SGLinearNinePoint()
    {
        //Dsin1Hz = [double.NaN, double.NaN, double.NaN, double.NaN, 6.038665550906850, 5.929395071482480, 5.796723978593900, 5.641175864433080, 5.463364606343460,
        //    5.263991944126470, 5.043844710595170, 4.803791726304610, 4.544780370714010, 4.267832843312850, 3.974042129466500, 3.664567686902280, 3.340630869859590,
        //    3.003510108962640, 2.654535865838850, 2.295085382394690, 1.926577245470980, 1.550465788328810, 1.168235351060560, 0.781394422577632, 0.391469687293947,
        //    0, -0.391469687293951, -0.781394422577636, -1.168235351060560, -1.550465788328820, -1.926577245470980, -2.295085382394690, -2.654535865838860,
        //    -3.003510108962640, -3.340630869859600, -3.664567686902290, -3.974042129466500, -4.267832843312860, -4.544780370714020, -4.803791726304620, -5.043844710595170,
        //    -5.263991944126470, -5.463364606343460, -5.641175864433080, -5.796723978593900, -5.929395071482480, -6.038665550906850, -6.124104176205660, -6.185373760158050,
        //    -6.222232499707570, -6.234534930248410, -6.222232499707570, -6.185373760158050, -6.124104176205660, -6.038665550906850, -5.929395071482470, -5.796723978593890,
        //    -5.641175864433080, -5.463364606343450, -5.263991944126460, -5.043844710595160, -4.803791726304600, -4.544780370714000, -4.267832843312840, -3.974042129466480,
        //    -3.664567686902270, -3.340630869859580, -3.003510108962620, -2.654535865838850, -2.295085382394670, -1.926577245470960, -1.550465788328810, -1.168235351060550,
        //    -0.781394422577620, -0.391469687293932, 0, 0.391469687293964, 0.781394422577651, 1.168235351060580, 1.550465788328830, 1.926577245470990, 2.295085382394700,
        //    2.654535865838870, 3.003510108962660, 3.340630869859610, 3.664567686902300, 3.974042129466510, 4.267832843312870, 4.544780370714030, 4.803791726304620,
        //    5.043844710595180, 5.263991944126470, 5.463364606343470, 5.641175864433090, 5.796723978593900, 5.929395071482480, 6.038665550906860,
        //    double.NaN, double.NaN, double.NaN, double.NaN];

        //Dsin2Hz = [double.NaN, double.NaN, double.NaN, double.NaN, 5.336855722314980, 4.927050168856280, 4.439542090957610, 3.882019782230640, 3.263275702531690,
        //    2.593067815617400, 1.881965700227190, 1.141183861512590, 0.382404871591728, -0.382404871591729, -1.141183861512580, -1.881965700227190, -2.593067815617400,
        //    -3.263275702531690, -3.882019782230650, -4.439542090957610, -4.927050168856280, -5.336855722314980, -5.662495872949700, -5.898835081056920, -6.042146136142610,
        //    -6.090168937258190, -6.042146136142610, -5.898835081056920, -5.662495872949690, -5.336855722314980, -4.927050168856280, -4.439542090957610, -3.882019782230640,
        //    -3.263275702531680, -2.593067815617390, -1.881965700227180, -1.141183861512570, -0.382404871591716, 0.382404871591741, 1.141183861512600, 1.881965700227200,
        //    2.593067815617410, 3.263275702531700, 3.882019782230660, 4.439542090957620, 4.927050168856290, 5.336855722314990, 5.662495872949700, 5.898835081056920,
        //    6.042146136142610, 6.090168937258210, 6.042146136142610, 5.898835081056920, 5.662495872949690, 5.336855722314970, 4.927050168856270, 4.439542090957600,
        //    3.882019782230630, 3.263275702531670, 2.593067815617380, 1.881965700227170, 1.141183861512560, 0.382404871591705, -0.382404871591749, -1.141183861512610,
        //    -1.881965700227210, -2.593067815617420, -3.263275702531710, -3.882019782230670, -4.439542090957630, -4.927050168856300, -5.336855722315000, -5.662495872949710,
        //    -5.898835081056940, -6.042146136142620, -6.090168937258180, -6.042146136142600, -5.898835081056920, -5.662495872949680, -5.336855722314960, -4.927050168856260,
        //    -4.439542090957590, -3.882019782230620, -3.263275702531660, -2.593067815617370, -1.881965700227160, -1.141183861512550, -0.382404871591687, 0.382404871591768,
        //    1.141183861512620, 1.881965700227230, 2.593067815617440, 3.263275702531730, 3.882019782230680, 4.439542090957640, 4.927050168856310, 5.336855722315010,
        //    double.NaN, double.NaN, double.NaN, double.NaN];

        //DsinSum = [double.NaN, double.NaN, double.NaN, double.NaN, 11.375521273221800, 10.856445240338800, 10.236266069551500, 9.523195646663730, 8.726640308875160,
        //    7.857059759743870, 6.925810410822360, 5.944975587817200, 4.927185242305740, 3.885427971721120, 2.832858267953910, 1.782601986675100, 0.747563054242196,
        //    -0.259765593569052, -1.227483916391790, -2.144456708562930, -3.000472923385310, -3.786389933986170, -4.494260521889140, -5.117440658479290, -5.650676448848660,
        //    -6.090168937258200, -6.433615823436560, -6.680229503634560, -6.830731224010260, -6.887321510643800, -6.853627414327260, -6.734627473352290, -6.536555648069500,
        //    -6.266785811494330, -5.933698685476990, -5.546533387129470, -5.115225990979070, -4.650237714904570, -4.162375499122280, -3.662607864792020, -3.161879010367970,
        //    -2.670924128509060, -2.200088903811760, -1.759156082202430, -1.357181887636270, -1.002344902626190, -0.701809828591861, -0.461608303255958, -0.286538679101125,
        //    -0.180086363564963, -0.144365992990203, -0.180086363564966, -0.286538679101132, -0.461608303255968, -0.701809828591874, -1.002344902626200, -1.357181887636290,
        //    -1.759156082202450, -2.200088903811780, -2.670924128509080, -3.161879010367990, -3.662607864792040, -4.162375499122300, -4.650237714904590, -5.115225990979090,
        //    -5.546533387129480, -5.933698685477000, -6.266785811494340, -6.536555648069510, -6.734627473352300, -6.853627414327260, -6.887321510643800, -6.830731224010260,
        //    -6.680229503634560, -6.433615823436550, -6.090168937258170, -5.650676448848640, -5.117440658479260, -4.494260521889100, -3.786389933986130, -3.000472923385260,
        //    -2.144456708562890, -1.227483916391750, -0.259765593569008, 0.747563054242242, 1.782601986675140, 2.832858267953960, 3.885427971721180, 4.927185242305790,
        //    5.944975587817240, 6.925810410822410, 7.857059759743910, 8.726640308875200, 9.523195646663770, 10.236266069551500, 10.856445240338800, 11.375521273221900,
        //    double.NaN, double.NaN, double.NaN, double.NaN];

        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGLinearNinePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 4; i < Dsin1Hz.Length - 4; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGLinearNinePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 4; i < Dsin2Hz.Length - 4; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-0);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGLinearNinePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 4; i < DsinSum.Length - 4; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-0);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGLinearNinePoint, 0, 1, 100);
        for (int i = 4; i < Dsin1Hz.Length - 4; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-1);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearNinePoint, 0, 1, 100);
        for (int i = 4; i < Dsin2Hz.Length - 4; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-0);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGLinearNinePoint, 0, 1, 100);
        for (int i = 4; i < DsinSum.Length - 4; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-0);
    }

    [TestMethod]
    public void Test_Derivative_SGCubicFivePoint()
    {
        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGCubicFivePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 2; i < Dsin1Hz.Length - 2; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-4);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGCubicFivePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 2; i < Dsin2Hz.Length - 2; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-4);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGCubicFivePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 2; i < DsinSum.Length - 2; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-4);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGCubicFivePoint, 0, 1, 100);
        for (int i = 2; i < Dsin1Hz.Length - 2; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-4);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGCubicFivePoint, 0, 1, 100);
        for (int i = 2; i < Dsin2Hz.Length - 2; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-4);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGCubicFivePoint, 0, 1, 100);
        for (int i = 2; i < DsinSum.Length - 2; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-4);
    }

    [TestMethod]
    public void Test_Derivative_SGCubicSevenPoint()
    {
        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGCubicSevenPoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 3; i < Dsin1Hz.Length - 3; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-4);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGCubicSevenPoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 3; i < Dsin2Hz.Length - 3; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-3);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGCubicSevenPoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 3; i < DsinSum.Length - 3; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-3);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGCubicSevenPoint, 0, 1, 100);
        for (int i = 3; i < Dsin1Hz.Length - 3; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-4);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGCubicSevenPoint, 0, 1, 100);
        for (int i = 3; i < Dsin2Hz.Length - 3; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-3);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGCubicSevenPoint, 0, 1, 100);
        for (int i = 3; i < DsinSum.Length - 3; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-3);
    }

    [TestMethod]
    public void Test_Derivative_SGCubicNinePoint()
    {
        var result = Derivative.Derivate(sin1Hz, DerivativeMethod.SGCubicNinePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 4; i < Dsin1Hz.Length - 4; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-4);

        result = Derivative.Derivate(sin2Hz, DerivativeMethod.SGCubicNinePoint, 0, sin1Hz.GetUpperBound(0), 100);
        for (int i = 4; i < Dsin2Hz.Length - 4; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-2);

        result = Derivative.Derivate(sinSum, DerivativeMethod.SGCubicNinePoint, 0, sinSum.GetUpperBound(0), 100);
        for (int i = 4; i < DsinSum.Length - 4; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-2);


        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x), DerivativeMethod.SGCubicNinePoint, 0, 1, 100);
        for (int i = 4; i < Dsin1Hz.Length - 4; i++)
            Assert.AreEqual(Dsin1Hz[i], result[i], 1e-4);

        result = Derivative.Derivate((x) => 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGCubicNinePoint, 0, 1, 100);
        for (int i = 4; i < Dsin2Hz.Length - 4; i++)
            Assert.AreEqual(Dsin2Hz[i], result[i], 1e-2);

        result = Derivative.Derivate((x) => Math.Sin(2 * Math.PI * 1 * x) + 0.5 * Math.Sin(2 * Math.PI * 2 * x), DerivativeMethod.SGCubicNinePoint, 0, 1, 100);
        for (int i = 4; i < DsinSum.Length - 4; i++)
            Assert.AreEqual(DsinSum[i], result[i], 1e-2);
    }
}
